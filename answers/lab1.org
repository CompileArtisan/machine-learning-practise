#+title: Lab Assignment 1 (Set A)
#+author: Praanesh Balakrishnan Nair

* Consider the given list as [2, 7, 4, 1, 3, 6]. Write a program to count pairs of elements with sum equal to 10.
#+begin_src python :results output raw
def main():
    l1 = [2, 7, 4, 1, 3, 6]
    count = 0
    for i in range(len(l1)):
        for j in range(len(l1)):
            if i!=j and int(l1[i]) + int(l1[j])==10:
                count+=1
    print(count)

if __name__ == "__main__":
    print("Output:")
    main()

#+end_src

#+RESULTS:
Output:
4

* Write a program that takes a list of real numbers as input and returns the range (difference between minimum and maximum) of the list. Check for list being less than 3 elements in which case return an error message (Ex: “Range determination not possible”). Given a list [5,3,8,1,0,4], the range is 8 (8-0).
#+begin_src python :results output raw
import random

def main():
    real_numbers = []
    for i in range(10):
        real_numbers.append(random.randint(0,10))
    print(real_numbers)
    if len(real_numbers)>2:
        print(f"Range = {max(real_numbers) - min(real_numbers)}")
    else:
        print(f"Array is of length {len(real_numbers)}, which is too small.")

if __name__ == "__main__":
    print("Output:")
    main()
#+end_src

#+RESULTS:
Output:
[0, 3, 8, 4, 5, 7, 7, 0, 5, 1]
Range = 8



* Write a program that accepts a square matrix A and a positive integer m as arguments and returns \(A^{m}\).
#+begin_src python :results output raw

import random
import numpy as np

def main():
    # Dimension of Matrix
    n = random.randint(2, 10)

    # Matrix
    matrix = np.zeros((n, n))

    # Elements of the matrix
    for i in range(n):
        for j in range(n):
            matrix[i, j] = random.randint(0, 10)

    # Integer m
    m = random.randint(0, 100)

    # Print A^m
    try:
        result = np.linalg.matrix_power(matrix, m)
        print("Matrix A raised to the power m:")
        print(result)
    except Exception as e:
        print("An error occurred:", e)

if __name__ == "__main__":
    print("Output:")
    main()

#+end_src

#+RESULTS:
Output:
Matrix A raised to the power m:
[[1.09588783e+31 8.52962199e+30 1.15205643e+31 1.43217264e+31
  1.06259991e+31 1.23317888e+31]
 [1.11526141e+31 8.68041230e+30 1.17242298e+31 1.45749121e+31
  1.08138501e+31 1.25497955e+31]
 [8.30324542e+30 6.46266365e+30 8.72881966e+30 1.08511844e+31
  8.05103186e+30 9.34346254e+30]
 [1.12229488e+31 8.73515588e+30 1.17981694e+31 1.46668297e+31
  1.08820484e+31 1.26289416e+31]
 [1.31111753e+31 1.02048189e+31 1.37831750e+31 1.71344786e+31
  1.27129195e+31 1.47537221e+31]
 [8.32983264e+30 6.48335728e+30 8.75676958e+30 1.08859302e+31
  8.07681149e+30 9.37338057e+30]]

* Write a program to count the highest occurring character & its occurrence count in an input string. Consider only alphabets. Ex:  for “hippopotamus” as input string, the maximally occurring character is ‘p’ & occurrence count is 3.
#+begin_src python :results output raw

import random
import numpy as np

def main():

    x = "hippopotamus"
    count = {}
    for c in x:
        if c in count:
            count[c]+=1
        else:
            count[c]=1
    most_repeated = max(count, key=count.get)
    print(most_repeated)
    print(count[str(most_repeated)])



if __name__ == "__main__":
    print("Output:")
    main()


#+end_src

#+RESULTS:
Output:
p
3
